# Базовый образ с предустановленным Node.js 22 (LTS на момент написания)
# Используется для выполнения yarn/npm и запуска приложения
FROM node:22-alpine

# Устанавливаем рабочую директорию внутри контейнера
# Все последующие команды выполняются относительно этой папки
WORKDIR /app

# Копируем только файлы зависимостей из папки frontend для эффективного кеширования слоёв
# "package*.json" захватывает как package.json, так и package-lock.json/packge.json для npm; для yarn также может существовать yarn.lock (не копируем его здесь)
# Примечание: пути относительны к контексту сборки (корню проекта при docker build)
COPY frontend/package*.json ./

# Устанавливаем зависимости проекта
# Образ node:22 включает yarn по умолчанию, поэтому команда доступна
# Используйте флаг --frozen-lockfile при наличии yarn.lock для детерминированных сборок
RUN yarn install

# Копируем остальной исходный код фронтенда в рабочую директорию контейнера
# Это должно идти после установки зависимостей, чтобы сохранить кеш слоёв для более быстрых сборок
COPY frontend/ .

# Открываем порт 3000 внутри контейнера (Next.js dev-сервер по умолчанию)
# Это директива-документация: фактическое пробрасывание делается через -p при запуске контейнера
EXPOSE 3000

# Команда по умолчанию для запуска приложения в режиме gотовом к продакшн
# Сначала собираем проект, затем запускаем сервер
RUN yarn build

# Команда по умолчанию для запуска приложения в продакшн-режиме
CMD ["yarn", "start"]

